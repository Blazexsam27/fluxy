[{"filePath":"D:\\fluxy\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\CardsStatsSection\\CardsStatsSection.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'errorCountValue' is never reassigned. Use 'const' instead.","line":30,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":30,"endColumn":22,"fix":{"range":[1159,1287],"text":"const errorCountValue =\r\n    errorCountObj.errorCount +\r\n    errorCountObj.fatalErrorCount +\r\n    errorCountObj.fixableErrorCount;"}},{"ruleId":"prefer-const","severity":2,"message":"'warningCountValue' is never reassigned. Use 'const' instead.","line":35,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":35,"endColumn":24,"fix":{"range":[1293,1389],"text":"const warningCountValue =\r\n    warningCountObj.warningCount + warningCountObj.fixableWarningCount;"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'analysisReportObject' aren't valid dependencies because mutating them doesn't re-render the component.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [dispatch]","fix":{"range":[3242,3279],"text":"[dispatch]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'getFilteredAnalysisReport' and 'statisticsData'. Either include them or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [getFilteredAnalysisReport, statisticsData]","fix":{"range":[3381,3383],"text":"[getFilteredAnalysisReport, statisticsData]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// components/StatisticsSection.tsx\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport Grid from \"@mui/material/Grid2\";\r\nimport StatisticsCard from \"../Widgets/StatisticsCard\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport CodeIcon from \"@mui/icons-material/Code\";\r\n\r\nimport analysisReportObject from \"../../../../reports/eslint-report-1.json\";\r\nimport reportServices from \"../../services/report.services\";\r\nimport { setReportObjectList } from \"../../features/report\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport BugReportIcon from \"@mui/icons-material/BugReport\";\r\nimport WarningIcon from \"@mui/icons-material/Warning\";\r\nimport codebaseServices from \"../../services/codebase.services\";\r\nimport { StatisticsCardType } from \"../../types/report.types\";\r\n\r\nconst StatisticsSection: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  // States\r\n  const [errorCountObj, setErrorCountObj] = useState({\r\n    errorCount: 0,\r\n    fatalErrorCount: 0,\r\n    fixableErrorCount: 0,\r\n  });\r\n  const [warningCountObj, setWarningCountObj] = useState({\r\n    warningCount: 0,\r\n    fixableWarningCount: 0,\r\n  });\r\n\r\n  let errorCountValue =\r\n    errorCountObj.errorCount +\r\n    errorCountObj.fatalErrorCount +\r\n    errorCountObj.fixableErrorCount;\r\n\r\n  let warningCountValue =\r\n    warningCountObj.warningCount + warningCountObj.fixableWarningCount;\r\n\r\n  const statisticsData: StatisticsCardType[] = [\r\n    {\r\n      title: \"Lines Of Code\",\r\n      value: codebaseServices.getTotalLinesOfCode(),\r\n      percentage: 12,\r\n      description: \"Total lines of code in current codebase\",\r\n      icon: <CodeIcon />,\r\n      iconBgColor: \"#0be881\",\r\n    },\r\n    {\r\n      title: \"Error Count\",\r\n      value: errorCountValue,\r\n      percentage: 8.2,\r\n      description: \"Total fatal errors count in current codebase\",\r\n      icon: <BugReportIcon />,\r\n      iconBgColor: \"#f53b57\",\r\n    },\r\n    {\r\n      title: \"Warning Count\",\r\n      value: warningCountValue,\r\n      percentage: -6.3,\r\n      description: \"Total warning count in current codebase\",\r\n      icon: <WarningIcon />,\r\n      iconBgColor: \"#F4631E\",\r\n    },\r\n    {\r\n      title: \"Fatal Warning Count\",\r\n      value: warningCountObj.fixableWarningCount,\r\n      percentage: 6.9,\r\n      description: \"Total fixable warning count in current codebase\",\r\n      icon: <TrendingUpIcon />,\r\n      iconBgColor: \"#0be881\",\r\n    },\r\n    // Add more statistics as needed\r\n  ];\r\n\r\n  const [statistics, setStatistics] = useState<StatisticsCardType[]>([]);\r\n  console.log(statisticsData);\r\n  const getFilteredAnalysisReport = useCallback(() => {\r\n    console.log(analysisReportObject);\r\n    try {\r\n      const filteredAnalysisReport =\r\n        reportServices.removeZeroErrorCountObjects(analysisReportObject);\r\n      dispatch(setReportObjectList(filteredAnalysisReport));\r\n\r\n      const errorCountObject = reportServices.getErrorCountObject(\r\n        filteredAnalysisReport\r\n      );\r\n      const warningCountObject = reportServices.getWarningCountObject(\r\n        filteredAnalysisReport\r\n      );\r\n\r\n      setErrorCountObj(errorCountObject);\r\n      setWarningCountObj(warningCountObject);\r\n    } catch (error) {\r\n      console.error(\"Error occured\", error);\r\n    }\r\n  }, [analysisReportObject, errorCountObj]);\r\n\r\n  useEffect(() => {\r\n    getFilteredAnalysisReport();\r\n    setStatistics(statisticsData);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {statistics.map((stat, index) => (\r\n        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={index}>\r\n          <StatisticsCard\r\n            title={stat.title}\r\n            value={stat.value}\r\n            percentage={warningCountValue}\r\n            description={stat.description}\r\n            icon={stat.icon}\r\n            iconBgColor={stat.iconBgColor}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default StatisticsSection;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\ChartsSection\\ChartsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\CodebaseStats\\CodebaseStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1810,1813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1810,1813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport codebaseServices from \"../../services/codebase.services\";\r\nimport LinearProgress, {\r\n  LinearProgressProps,\r\n} from \"@mui/material/LinearProgress\";\r\n\r\nfunction LinearProgressWithLabel(\r\n  props: LinearProgressProps & { value: number }\r\n) {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography\r\n          variant=\"body2\"\r\n          sx={{ color: \"text.secondary\" }}\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default function CodebaseStats() {\r\n  return (\r\n    <TableContainer component={Paper} sx={{ marginBlock: \"2rem\" }}>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead sx={{ background: \"#0B192C\" }}>\r\n          <TableRow>\r\n            <TableCell align=\"left\" sx={{ color: \"#fff\" }}>\r\n              Language\r\n            </TableCell>\r\n            <TableCell align=\"center\" sx={{ color: \"#fff\" }}>\r\n              Line Of Code\r\n            </TableCell>\r\n            <TableCell align=\"center\" sx={{ color: \"#fff\" }}>\r\n              Comments\r\n            </TableCell>\r\n            <TableCell></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {codebaseServices.getCodebaseInfo().map((item: any) => (\r\n            <TableRow\r\n              key={item.toolName}\r\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n            >\r\n              <TableCell align=\"left\">{item.toolName}</TableCell>\r\n              <TableCell align=\"center\">{item.code}</TableCell>\r\n              <TableCell align=\"center\">{item.comment}</TableCell>\r\n              <TableCell>\r\n                <LinearProgressWithLabel\r\n                  variant=\"determinate\"\r\n                  value={\r\n                    (item.code / codebaseServices.getTotalLinesOfCode()) * 100\r\n                  }\r\n                />\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\ErrorTable\\ErrorTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useSelector } from \"react-redux\";\r\nimport CollapsibleTable from \"../Widgets/CollapsibleTable\";\r\nimport { ReportObject } from \"../../types/report.types\";\r\nimport { Container } from \"@mui/material\";\r\n\r\nfunction ErrorTable() {\r\n  const { errorObjectList }: { errorObjectList: ReportObject[] } = useSelector(\r\n    (state: any) => state.report\r\n  );\r\n\r\n  return (\r\n    <Container\r\n      maxWidth={false}\r\n      sx={{\r\n        height: \"70vh\",\r\n        overflow: \"auto\",\r\n        marginBlock: \"1rem\",\r\n        marginBottom: \"5rem\",\r\n      }}\r\n    >\r\n      <CollapsibleTable dataList={errorObjectList} />;\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ErrorTable;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\WarningTable\\WarningTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\Widgets\\CollapsibleTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[819,822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[819,822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport { ReportObject } from \"../../types/report.types\";\r\n\r\ninterface CollapsibleTableProps {\r\n  dataList: ReportObject[];\r\n}\r\n\r\nfunction Row({ row }: { row: any }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const { line, severity } = row.messages;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {severity === 2 ? \"Error\" : \"Warning\"}\r\n        </TableCell>\r\n        <TableCell align=\"left\">{row.filePath}</TableCell>\r\n        <TableCell align=\"left\">{line}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box\r\n              sx={{\r\n                margin: 1,\r\n                paddingLeft: 11.5,\r\n                fontWeight: \"bold\",\r\n                color: `${row?.messages?.severity === 2 ? \"red\" : \"orange\"}`,\r\n              }}\r\n            >\r\n              {row?.messages?.message}\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function CollapsibleTable({ dataList }: CollapsibleTableProps) {\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead sx={{ background: \"#0B192C\" }}>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell sx={{ color: \"#fff\" }}>Type</TableCell>\r\n            <TableCell align=\"left\" sx={{ color: \"#fff\" }}>\r\n              File Path\r\n            </TableCell>\r\n            <TableCell align=\"left\" sx={{ color: \"#fff\" }}>\r\n              Line Number\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataList.map((item, index) => (\r\n            <Row key={index} row={item} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\components\\Widgets\\StatisticsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\features\\report.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[509,512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[509,512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[684,687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[684,687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1088,1091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1088,1091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1147,1150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1147,1150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1190,1193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1190,1193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\ntype ReportObject = {\r\n  filePath: string;\r\n  message: any[];\r\n};\r\n\r\ntype ReportState = {\r\n  reportObjectList: ReportObject[];\r\n  errorObjectList: ReportObject[];\r\n  warningObjectList: ReportObject[];\r\n};\r\n\r\nconst initialState: ReportState = {\r\n  reportObjectList: [],\r\n  errorObjectList: [],\r\n  warningObjectList: [],\r\n};\r\n\r\nconst reportSlice = createSlice({\r\n  name: \"report\",\r\n  initialState,\r\n  reducers: {\r\n    setReportObjectList(state: any, action: PayloadAction<any>) {\r\n      const payload = action.payload;\r\n      state.reportObjectList = payload;\r\n\r\n      // Extract errors\r\n      const errors: { messages: any[]; filePath: string }[] = [];\r\n      payload.map((obj: any) => {\r\n        obj.messages.map((item: any) => {\r\n          if (item.severity === 2) {\r\n            errors.push({\r\n              messages: item,\r\n              filePath: obj.filePath,\r\n            });\r\n          }\r\n        });\r\n      });\r\n      state.errorObjectList = errors;\r\n\r\n      // Extract warnings\r\n      const warnings: { messages: any[]; filePath: string }[] = [];\r\n      payload.map((obj: any) => {\r\n        obj.messages.map((item: any) => {\r\n          if (item.severity === 1) {\r\n            errors.push({\r\n              messages: item,\r\n              filePath: obj.filePath,\r\n            });\r\n          }\r\n        });\r\n      });\r\n      state.warningObjectList = warnings;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setReportObjectList } = reportSlice.actions;\r\nexport default reportSlice.reducer;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\services\\codebase.services.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'item' is never reassigned. Use 'const' instead.","line":7,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":7,"endColumn":20,"fix":{"range":[171,179],"text":"const item"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[207,210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[207,210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[343,346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[343,346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[475,478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[475,478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[700,703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[700,703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import analysisReportObject from \"../../../reports/line-of-code.json\";\r\n\r\nclass CodebaseServices {\r\n  getCodebaseInfo() {\r\n    try {\r\n      const result = [];\r\n      for (let item in analysisReportObject as any) {\r\n        if (item !== \"header\") {\r\n          result.push({\r\n            toolName: item,\r\n            ...(analysisReportObject as any)[item],\r\n          });\r\n        }\r\n      }\r\n      return result.sort((a: any, b: any) => b.code - a.code);\r\n    } catch (error: any) {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  getTotalLinesOfCode() {\r\n    try {\r\n      const codebase = this.getCodebaseInfo();\r\n      return codebase.reduce((acc, item) => acc + item.code, 0);\r\n    } catch (error: any) {\r\n      throw new error(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CodebaseServices();\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\services\\report.services.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[161,164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[161,164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'result' is never reassigned. Use 'const' instead.","line":8,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":17,"fix":{"range":[186,202],"text":"const result = [];"}},{"ruleId":"prefer-const","severity":2,"message":"'item' is never reassigned. Use 'const' instead.","line":10,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":10,"endColumn":20,"fix":{"range":[217,225],"text":"const item"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":22,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[661,664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[661,664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[874,877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[874,877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import utils from \"../utils/utils\";\r\n\r\n// service to manipulate analysis report json data\r\n\r\nclass ReportService {\r\n  removeZeroErrorCountObjects(dataObjectArr: any) {\r\n    try {\r\n      let result = [];\r\n\r\n      for (let item of dataObjectArr) {\r\n        if (\r\n          !item.errorCount ||\r\n          !item.fatalErrorCount ||\r\n          !item.fixableErrorCount ||\r\n          !item.fixableWarningCount ||\r\n          !item.warningCount\r\n        ) {\r\n          result.push(item);\r\n        }\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(\"Error while removing zero error object\");\r\n    }\r\n  }\r\n\r\n  getErrorCountObject(dataObjectArr: any) {\r\n    try {\r\n      return utils.getErrorCountObject(dataObjectArr);\r\n    } catch (error) {\r\n      throw new Error(\"Error while counting error objects\");\r\n    }\r\n  }\r\n\r\n  getWarningCountObject(dataObjectArr: any) {\r\n    try {\r\n      return utils.getWarningCountObject(dataObjectArr);\r\n    } catch (error) {\r\n      throw new Error(\"Error while warning count object\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ReportService();\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\types\\report.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62,65],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62,65],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type ReportObject = {\r\n  filePath: string;\r\n  message: any[];\r\n};\r\n\r\nexport type StatisticsCardType = {\r\n  title: string;\r\n  value: number;\r\n  percentage: number;\r\n  description: string;\r\n  icon: any;\r\n  iconBgColor: string;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\utils\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[697,700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[697,700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[875,878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[875,878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class Utils {\r\n  getErrorCountObject = (\r\n    reportObj: Array<any>\r\n  ): {\r\n    errorCount: number;\r\n    fatalErrorCount: number;\r\n    fixableErrorCount: number;\r\n  } => {\r\n    try {\r\n      let errorCount = 0,\r\n        fatalErrorCount = 0,\r\n        fixableErrorCount = 0;\r\n\r\n      reportObj.forEach((item: any) => {\r\n        errorCount += item.errorCount;\r\n        fatalErrorCount += item.fatalErrorCount;\r\n        fixableErrorCount += item.fixableErrorCount;\r\n      });\r\n      return { errorCount, fatalErrorCount, fixableErrorCount };\r\n    } catch (error) {\r\n      throw new Error(`Error while parsing report object ${error}`);\r\n    }\r\n  };\r\n\r\n  getWarningCountObject = (\r\n    reportObj: Array<any>\r\n  ): { fixableWarningCount: number; warningCount: number } => {\r\n    try {\r\n      let fixableWarningCount = 0,\r\n        warningCount = 0;\r\n\r\n      reportObj.forEach((item: any) => {\r\n        fixableWarningCount += item.fixableWarningCount;\r\n        warningCount += item.warningCount;\r\n      });\r\n\r\n      return { fixableWarningCount, warningCount };\r\n    } catch (error) {\r\n      throw new Error(`Error while parseing report object ${error}`);\r\n    }\r\n  };\r\n\r\n  getErrorsAndWarningsObject = () => {\r\n    return;\r\n  };\r\n}\r\n\r\nexport default new Utils();\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\views\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\fluxy\\frontend\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]